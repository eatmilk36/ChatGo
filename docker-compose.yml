services:
  mysql:
    image: mysql:5.7
    container_name: mysql_two
    environment:
      MYSQL_ROOT_PASSWORD: jeter
      MYSQL_DATABASE: chat
      MYSQL_USER: jeter
      MYSQL_PASSWORD: 12345678
    ports:
      - "3306:3306"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    container_name: redis_two
    command: >
      sh -c "redis-server --requirepass jeter --save '' --appendonly no &
             while ! redis-cli -h 127.0.0.1 -p 6379 -a jeter ping; do
             echo 'Waiting for Redis to start...';
             sleep 1;
             done;
             redis-cli -h 127.0.0.1 -p 6379 -a jeter CONFIG SET notify-keyspace-events Ex &&
             tail -f /dev/null"
    ports:
      - "6379:6379"
    networks:
      - app_network

  app:
    container_name: chat
    # 到哪裡找到DockerFile
    build:
      context: ./Chat_Goland
    # 容器裡面的工作路徑
    working_dir: /app
    # 容器啟動後要做的第一件事
    command: [ "./myapp" ]
    # Windows 路徑映射
    volumes:
      - C:/logs:/var/log/myapp
    # 依賴其他容器啟動成功後才啟動
    depends_on:
      mysql:
        # 通過健康檢查成功後啟動(因為有可能容器啟動了但是裡面的服務還沒有就緒)
        condition: service_healthy
        # 只要服務起來就通過
      redis:
        condition: service_started
    # 開放的Port
    ports:
      # swagger 端口
      - "8080:8080"
      # WebSocket 端口
      - "33925:33925"
    # 環境變數
    environment:
      - ENVIRONMENT=production
    # docker 內部網路
    networks:
      - app_network

#  frontend:
#    container_name: frontend
#    build:
#      context: ./chat_frontend
#      dockerfile: Dockerfile
#    working_dir: /app
#    ports:
#      - "80:80"
#    networks:
#      - app_network
#
#  cron:
#    container_name: chat_cron
#    build:
#      context: ./Chat_Cron
#    working_dir: /app
#    command: [ "./myapp-cron" ] # 根據你的排程應用名稱修改
#    depends_on:
#      mysql:
#        condition: service_started
#      redis:
#        condition: service_started
#    environment:
#      - ENVIRONMENT=production
#    networks:
#      - app_network
#
#  loki:
#    image: grafana/loki:2.9.1
#    container_name: loki
#    ports:
#      - "3100:3100"
#    user: "root"
#    volumes:
#      - C:/logs:/var/log/myapp
#      - ./loki-config:/etc/loki/
#      - C:/loki-data:/var/loki  # 將容器內的 /var/loki 目錄映射到宿主機
#    command: -config.file=/etc/loki/loki.yaml
#    networks:
#      - app_network
#
#  promtail:
#    image: grafana/promtail:2.9.1
#    container_name: promtail
#    ports:
#      - "9080:9080"
#    volumes:
#      - ./promtail-config:/etc/promtail/
#      - C:/logs:/var/log
#    command: -config.file=/etc/promtail/promtail.yaml
#    networks:
#      - app_network
#
#  # 查看需要把在頁面上把loki設定成http:loki:3100 跟 搜尋條件要改成{job="varlogs"}
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana_compose
#    ports:
#      - "3000:3000"
#    volumes:
#      - grafana-data:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    networks:
#      - app_network
#
#  alpine:
#    image: alpine:latest
#    container_name: alpine_test
#    command: sh -c "while true; do sleep 1000; done"
#    networks:
#      - app_network
#    stdin_open: true  # 允許你通過 'docker exec' 進行交互式操作
#    tty: true         # 配置容器為TTY模式

networks:
  app_network:
    driver: bridge
    enable_ipv6: false

volumes:
  grafana-data:
